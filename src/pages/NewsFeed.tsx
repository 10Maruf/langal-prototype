import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Newspaper, TrendingUp, TrendingDown, DollarSign, Calendar, ExternalLink } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface NewsItem {
  id: string;
  title: string;
  summary: string;
  category: 'policy' | 'market' | 'weather' | 'technology';
  date: string;
  source: string;
  link?: string;
  priority: 'high' | 'medium' | 'low';
}

interface MarketPrice {
  item: string;
  currentPrice: number;
  previousPrice: number;
  change: number;
  changePercent: number;
  market: string;
  date: string;
}

const NewsFeed = () => {
  const { toast } = useToast();
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  // Mock news data
  const newsItems: NewsItem[] = [
    {
      id: '1',
      title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßÄ‡¶ú ‡¶≠‡¶∞‡ßç‡¶§‡ßÅ‡¶ï‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™ ‡¶ò‡ßã‡¶∑‡¶£‡¶æ',
      summary: '‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß´‡ß¶% ‡¶¨‡ßÄ‡¶ú ‡¶≠‡¶∞‡ßç‡¶§‡ßÅ‡¶ï‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™ ‡¶ò‡ßã‡¶∑‡¶£‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ‡•§',
      category: 'policy',
      date: '‡ß® ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá',
      source: '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶Æ‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡¶æ‡¶≤‡¶Ø‡¶º',
      priority: 'high'
    },
    {
      id: '2',
      title: '‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
      summary: '‡¶¨‡¶ø‡¶ó‡¶§ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶£ ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßá‡¶°‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡ßÉ‡¶∑‡¶ï‡¶∞‡¶æ ‡¶è‡¶ñ‡¶®‡¶á ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
      category: 'market',
      date: '‡ß´ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá',
      source: '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶¨‡¶ø‡¶™‡¶£‡¶® ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞',
      priority: 'high'
    },
    {
      id: '3',
      title: '‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ',
      summary: '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß©-‡ß™ ‡¶¶‡¶ø‡¶® ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§',
      category: 'weather',
      date: '‡ßß ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá',
      source: '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞',
      priority: 'medium'
    },
    {
      id: '4',
      title: '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ã‡¶£‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞',
      summary: '‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ã‡¶£‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞ ‡ßØ% ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶Æ‡¶ø‡¶Ø‡¶º‡ßá ‡ß≠% ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§',
      category: 'policy',
      date: '‡ß® ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá',
      source: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï',
      priority: 'medium'
    },
    {
      id: '5',
      title: '‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡ßá‡¶ö ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£',
      summary: '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡ßá‡¶ö ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶£ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡•§',
      category: 'technology',
      date: '‡ß© ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá',
      source: '‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞',
      priority: 'low'
    },
    {
      id: '6',
      title: '‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤',
      summary: '‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶á‡¶â‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡ßÆ‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡¶∏‡ßç‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
      category: 'market',
      date: '‡ß™ ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá',
      source: '‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞',
      priority: 'low'
    }
  ];

  // Mock market prices
  const marketPrices: MarketPrice[] = [
    {
      item: '‡¶ß‡¶æ‡¶® (‡¶Ü‡¶Æ‡¶®)',
      currentPrice: 1250,
      previousPrice: 1200,
      change: 50,
      changePercent: 4.17,
      market: '‡¶ï‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶á ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞',
      date: '‡¶Ü‡¶ú'
    },
    {
      item: '‡¶Ü‡¶≤‡ßÅ',
      currentPrice: 45,
      previousPrice: 50,
      change: -5,
      changePercent: -10,
      market: '‡¶∂‡ßá‡¶∞‡ßá‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶ó‡¶∞',
      date: '‡¶Ü‡¶ú'
    },
    {
      item: '‡¶ü‡¶Æ‡ßá‡¶ü‡ßã',
      currentPrice: 80,
      previousPrice: 75,
      change: 5,
      changePercent: 6.67,
      market: '‡¶ï‡¶æ‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞',
      date: '‡¶Ü‡¶ú'
    },
    {
      item: '‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú',
      currentPrice: 60,
      previousPrice: 65,
      change: -5,
      changePercent: -7.69,
      market: '‡¶∂‡ßç‡¶Ø‡¶æ‡¶Æ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞',
      date: '‡¶Ü‡¶ú'
    },
    {
      item: '‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ',
      currentPrice: 140,
      previousPrice: 135,
      change: 5,
      changePercent: 3.7,
      market: '‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ',
      date: '‡¶Ü‡¶ú'
    }
  ];

  const categories = [
    { key: 'all', label: '‡¶∏‡¶¨', icon: 'üì∞' },
    { key: 'policy', label: '‡¶®‡ßÄ‡¶§‡¶ø‡¶Æ‡¶æ‡¶≤‡¶æ', icon: 'üìú' },
    { key: 'market', label: '‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞', icon: 'üíπ' },
    { key: 'weather', label: '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ', icon: 'üå¶Ô∏è' },
    { key: 'technology', label: '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø', icon: 'üíª' }
  ];

  const getFilteredNews = () => {
    if (selectedCategory === 'all') return newsItems;
    return newsItems.filter(item => item.category === selectedCategory);
  };

  const getCategoryBadgeColor = (category: string) => {
    switch (category) {
      case 'policy': return 'bg-blue-100 text-blue-800';
      case 'market': return 'bg-green-100 text-green-800';
      case 'weather': return 'bg-yellow-100 text-yellow-800';
      case 'technology': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityBadgeColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-orange-100 text-orange-800';
      case 'low': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="p-4 pb-20 space-y-4">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Newspaper className="h-5 w-5 text-primary" />
            ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶ì ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Market Prices */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <DollarSign className="h-5 w-5" />
            ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡¶¶‡¶∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {marketPrices.map((price, index) => (
              <div key={index} className="flex items-center justify-between border rounded-lg p-3 bg-muted/30">
                <div className="flex-1">
                  <div className="font-semibold">{price.item}</div>
                  <div className="text-sm text-muted-foreground">{price.market}</div>
                </div>
                <div className="text-right">
                  <div className="font-bold text-lg">‡ß≥{price.currentPrice}</div>
                  <div className={`text-sm flex items-center gap-1 ${
                    price.change > 0 ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {price.change > 0 ? <TrendingUp className="h-3 w-3" /> : <TrendingDown className="h-3 w-3" />}
                    {price.change > 0 ? '+' : ''}{price.change} ({price.changePercent.toFixed(1)}%)
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4 text-center">
            <Button variant="outline" size="sm">
              ‡¶Ü‡¶∞‡ßã ‡¶¶‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Category Filter */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-wrap gap-2">
            {categories.map(category => (
              <button
                key={category.key}
                onClick={() => setSelectedCategory(category.key)}
                className={`px-3 py-2 rounded-full text-sm border transition-colors flex items-center gap-1 ${
                  selectedCategory === category.key
                    ? "bg-primary text-primary-foreground border-primary"
                    : "bg-background border-border hover:bg-muted"
                }`}
              >
                <span>{category.icon}</span>
                {category.label}
              </button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* News Items */}
      <div className="space-y-3">
        {getFilteredNews().map((item) => (
          <Card key={item.id}>
            <CardContent className="pt-4">
              <div className="space-y-3">
                <div className="flex items-start justify-between gap-3">
                  <h3 className="font-semibold text-lg leading-tight">{item.title}</h3>
                  <div className="flex gap-1 flex-shrink-0">
                    <Badge className={getPriorityBadgeColor(item.priority)}>
                      {item.priority === 'high' ? '‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø' : item.priority === 'medium' ? '‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£' : '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£'}
                    </Badge>
                  </div>
                </div>
                
                <p className="text-muted-foreground">{item.summary}</p>
                
                <div className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-3">
                    <Badge variant="outline" className={getCategoryBadgeColor(item.category)}>
                      {item.category === 'policy' ? '‡¶®‡ßÄ‡¶§‡¶ø‡¶Æ‡¶æ‡¶≤‡¶æ' : 
                       item.category === 'market' ? '‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞' :
                       item.category === 'weather' ? '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ' : '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø'}
                    </Badge>
                    <span className="text-muted-foreground">{item.source}</span>
                  </div>
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Calendar className="h-4 w-4" />
                    {item.date}
                  </div>
                </div>
                
                {item.link && (
                  <Button variant="outline" size="sm" className="w-full">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡¶°‡¶º‡ßÅ‡¶®
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Subscription Notice */}
      <Card>
        <CardContent className="pt-4 text-center">
          <div className="space-y-2">
            <h4 className="font-semibold">‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡ßá‡¶§‡ßá</h4>
            <p className="text-sm text-muted-foreground">
              ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶ì ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡¶¶‡¶∞ SMS ‡¶è ‡¶™‡ßá‡¶§‡ßá ‡ßß‡ß¨‡ßß‡ß®‡ß© ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá "NEWS" ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
            </p>
            <Button variant="outline" size="sm">
              SMS ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default NewsFeed;