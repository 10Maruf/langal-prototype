import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Cloud, Sun, CloudRain, Wind, Thermometer, Mic, MapPin, Calendar, RefreshCw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  condition: string;
  windSpeed: number;
  forecast: {
    day: string;
    temp: number;
    condition: string;
    icon: string;
  }[];
}

const WeatherPlanning = () => {
  // Mock weather data
  const mockWeather: WeatherData = {
    temperature: 28,
    humidity: 75,
    rainfall: 12,
    condition: "‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ",
    windSpeed: 15,
    forecast: [
      { day: "‡¶Ü‡¶ú", temp: 28, condition: "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚òÅÔ∏è" },
      { day: "‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤", temp: 30, condition: "‡¶∞‡ßã‡¶¶", icon: "‚òÄÔ∏è" },
      { day: "‡¶™‡¶∞‡¶∂‡ßÅ", temp: 26, condition: "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø", icon: "üåßÔ∏è" },
      { day: "‡ß™ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 27, condition: "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚òÅÔ∏è" },
      { day: "‡ß´ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 29, condition: "‡¶∞‡ßã‡¶¶", icon: "‚òÄÔ∏è" },
      { day: "‡ß¨ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 25, condition: "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø", icon: "üåßÔ∏è" },
      { day: "‡ß≠ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 28, condition: "‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚õÖ" }
    ]
  };

  const { toast } = useToast();
  const [location, setLocation] = useState("");
  const [cropName, setCropName] = useState("");
  const [question, setQuestion] = useState("");
  // ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá‡¶á mockWeather ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
  const [weather, setWeather] = useState<WeatherData | null>(mockWeather);
  const [recommendations, setRecommendations] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentSeason, setCurrentSeason] = useState("");

  // Auto detect current season based on current date
  const getCurrentSeason = () => {
    const now = new Date();
    const month = now.getMonth() + 1; // JavaScript months are 0-indexed

    if (month >= 12 || month <= 2) {
      return "‡¶∞‡¶¨‡¶ø ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ (‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞-‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø)";
    } else if (month >= 3 && month <= 6) {
      return "‡¶™‡ßç‡¶∞‡¶æ‡¶ï-‡¶ñ‡¶∞‡¶ø‡¶™ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ (‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö-‡¶ú‡ßÅ‡¶®)";
    } else if (month >= 7 && month <= 8) {
      return "‡¶ñ‡¶∞‡¶ø‡¶™ ‡ßß ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ (‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á-‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü)";
    } else if (month >= 9 && month <= 11) {
      return "‡¶ñ‡¶∞‡¶ø‡¶™ ‡ß® ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ (‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞-‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞)";
    }
    return "‡¶∞‡¶¨‡¶ø ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ";
  };

  const handleAutoSelectSeason = () => {
    const season = getCurrentSeason();
    setCurrentSeason(season);
    toast({
      title: "‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§",
      description: `‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ: ${season}`,
    });
  };

  // Auto-select season on page load
  useEffect(() => {
    const season = getCurrentSeason();
    setCurrentSeason(season);
  }, []);

  const getCropRecommendations = (crop: string, weather: WeatherData) => {
    const recommendations = [];

    if (weather.temperature > 30) {
      recommendations.push("üå°Ô∏è ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶õ‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶∏‡¶ï‡¶æ‡¶≤/‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®");
    }

    if (weather.humidity > 80) {
      recommendations.push("üíß ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®");
    }

    if (weather.rainfall > 10) {
      recommendations.push("üåßÔ∏è ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ - ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®");
    }

    if (weather.windSpeed > 20) {
      recommendations.push("üí® ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶¶‡¶ø‡¶®");
    }

    // Crop specific recommendations
    if (crop.includes("‡¶ß‡¶æ‡¶®")) {
      recommendations.push("üåæ ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶ú‡¶≤‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡ß´-‡ßß‡ß¶ ‡¶∏‡ßá‡¶Æ‡¶ø ‡¶™‡¶æ‡¶®‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®");
    } else if (crop.includes("‡¶ü‡¶Æ‡ßá‡¶ü‡ßã")) {
      recommendations.push("üçÖ ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶™‡¶æ‡¶§‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶®‡¶ø ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®");
    } else if (crop.includes("‡¶∏‡¶¨‡¶ú‡¶ø")) {
      recommendations.push("ü•¨ ‡¶∏‡¶¨‡¶ú‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®");
    }

    return recommendations;
  };

  const handleVoiceInput = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      const recognition = new SpeechRecognition();

      recognition.lang = 'bn-BD';
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setQuestion(prev => prev ? `${prev} ${transcript}` : transcript);
      };

      recognition.start();
    } else {
      toast({
        title: "‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡ßá‡¶á",
        description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§",
        variant: "destructive"
      });
    }
  };

  const handleLocationFromGPS = () => {
    if ('geolocation' in navigator) {
      toast({
        title: "GPS ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...",
      });

      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;

          try {
            // Reverse geocoding using OpenWeatherMap API
            const API_KEY = "bd5e378503939ddaee76f12ad7a97608";
            const reverseGeoUrl = `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`;

            const geoResponse = await fetch(reverseGeoUrl);
            let locationName = `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`; // fallback

            if (geoResponse.ok) {
              const geoData = await geoResponse.json();
              if (geoData.length > 0) {
                const location = geoData[0];
                // Use local name if available, otherwise use English name
                locationName = location.local_names?.bn || location.name || locationName;
              }
            }

            setLocation(locationName);

            toast({
              title: "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá",
              description: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${locationName}`,
            });

            // Automatically fetch weather data for the detected location
            const weatherData = await fetchWeatherData(locationName);
            if (weatherData) {
              setWeather(weatherData);
              const recs = getCropRecommendations(cropName, weatherData);
              setRecommendations(recs);
            }
          } catch (error) {
            toast({
              title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
              description: "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
              variant: "destructive"
            });
          }
        },
        (error) => {
          let errorMessage = "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§";

          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = "GPS ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§";
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§";
              break;
            case error.TIMEOUT:
              errorMessage = "GPS ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑‡•§";
              break;
          }

          toast({
            title: "GPS ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
            description: errorMessage,
            variant: "destructive"
          });
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        }
      );
    } else {
      toast({
        title: "‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡ßá‡¶á",
        description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ GPS ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§",
        variant: "destructive"
      });
    }
  };

  const fetchWeatherData = async (locationName: string): Promise<WeatherData | null> => {
    try {
      // OpenWeatherMap API (free tier)
      const API_KEY = "bd5e378503939ddaee76f12ad7a97608"; // Your actual API key

      // Try multiple URL formats for better location matching
      const locationQueries = [
        locationName, // Original name
        `${locationName},BD`, // With Bangladesh country code
        `${locationName},Bangladesh`, // With full country name
      ];

      let currentData = null;
      let forecastData = null;

      // Try different location formats until one works
      for (const query of locationQueries) {
        try {
          const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(query)}&appid=${API_KEY}&units=metric&lang=en`;
          const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(query)}&appid=${API_KEY}&units=metric&lang=en`;

          console.log(`Trying query: "${query}"`);
          console.log("Current URL:", currentWeatherUrl);
          console.log("Forecast URL:", forecastUrl);

          const [currentResponse, forecastResponse] = await Promise.all([
            fetch(currentWeatherUrl),
            fetch(forecastUrl)
          ]);

          console.log(`Response for "${query}" - Current:`, currentResponse.status, "Forecast:", forecastResponse.status);

          if (currentResponse.ok && forecastResponse.ok) {
            currentData = await currentResponse.json();
            forecastData = await forecastResponse.json();
            console.log(`Success with query: "${query}"`);
            break; // Exit loop on success
          } else {
            console.log(`Failed with query: "${query}"`);
            if (!currentResponse.ok) {
              const errorText = await currentResponse.text();
              console.log("Current API error:", errorText);
            }
            if (!forecastResponse.ok) {
              const errorText = await forecastResponse.text();
              console.log("Forecast API error:", errorText);
            }
          }
        } catch (queryError) {
          console.log(`Error with query "${query}":`, queryError);
          continue; // Try next query format
        }
      }

      if (!currentData || !forecastData) {
        throw new Error("All location query formats failed");
      }

      console.log("Final current data:", currentData);
      console.log("Final forecast data:", forecastData);

      // Map weather condition to Bengali
      const getConditionInBengali = (condition: string): string => {
        const conditionMap: Record<string, string> = {
          "clear": "‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞",
          "clouds": "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ",
          "rain": "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø",
          "drizzle": "‡¶ó‡ßÅ‡¶Å‡¶°‡¶º‡¶ø ‡¶ó‡ßÅ‡¶Å‡¶°‡¶º‡¶ø ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø",
          "thunderstorm": "‡¶¨‡¶ú‡ßç‡¶∞‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø",
          "snow": "‡¶§‡ßÅ‡¶∑‡¶æ‡¶∞‡¶™‡¶æ‡¶§",
          "mist": "‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∂‡¶æ",
          "fog": "‡¶ò‡¶® ‡¶ï‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∂‡¶æ",
          "haze": "‡¶ß‡ßã‡¶Å‡¶Ø‡¶º‡¶æ‡¶∂‡¶æ"
        };
        return conditionMap[condition.toLowerCase()] || "‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ";
      };

      // Get weather icon
      const getWeatherIcon = (condition: string): string => {
        const iconMap: Record<string, string> = {
          "clear": "‚òÄÔ∏è",
          "clouds": "‚òÅÔ∏è",
          "rain": "üåßÔ∏è",
          "drizzle": "üå¶Ô∏è",
          "thunderstorm": "‚õàÔ∏è",
          "snow": "üå®Ô∏è",
          "mist": "üå´Ô∏è",
          "fog": "üå´Ô∏è",
          "haze": "üå´Ô∏è"
        };
        return iconMap[condition.toLowerCase()] || "‚õÖ";
      };

      // Process 7-day forecast (OpenWeatherMap free tier gives 5-day forecast)
      const dailyForecasts: { [key: string]: any } = {};
      const today = new Date();

      // Group forecast by date and pick noon data (12:00) for each day
      forecastData.list.forEach((item: any) => {
        const date = new Date(item.dt * 1000);
        const dateKey = date.toDateString();

        // Prefer noon time (12:00) for daily forecast, otherwise take first entry of the day
        if (!dailyForecasts[dateKey] || date.getHours() >= 12) {
          dailyForecasts[dateKey] = item;
        }
      });

      const dayNames = ["‡¶Ü‡¶ú", "‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤", "‡¶™‡¶∞‡¶∂‡ßÅ", "‡ß© ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", "‡ß™ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", "‡ß´ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", "‡ß¨ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞"];
      const forecastEntries = Object.values(dailyForecasts);

      // Create forecast array with available data + extend if needed
      const forecast = [];
      for (let i = 0; i < 7; i++) {
        if (i < forecastEntries.length) {
          const item: any = forecastEntries[i];
          forecast.push({
            day: dayNames[i] || `${i + 1} ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞`,
            temp: Math.round(item.main.temp),
            condition: getConditionInBengali(item.weather[0].main),
            icon: getWeatherIcon(item.weather[0].main)
          });
        } else {
          // Fill remaining days with estimated data based on last available day
          const lastItem = forecastEntries[forecastEntries.length - 1];
          if (lastItem) {
            forecast.push({
              day: dayNames[i] || `${i + 1} ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞`,
              temp: Math.round(lastItem.main.temp + (Math.random() * 6 - 3)), // ¬±3¬∞C variation
              condition: getConditionInBengali(lastItem.weather[0].main),
              icon: getWeatherIcon(lastItem.weather[0].main)
            });
          }
        }
      }

      console.log("Processed forecast:", forecast);

      const result = {
        temperature: Math.round(currentData.main.temp),
        humidity: currentData.main.humidity,
        rainfall: currentData.rain?.["1h"] || currentData.rain?.["3h"] || 0,
        condition: getConditionInBengali(currentData.weather[0].main),
        windSpeed: Math.round(currentData.wind.speed * 3.6), // Convert m/s to km/h
        forecast
      };

      console.log("Final weather data:", result);
      return result;

    } catch (error) {
      console.error("Weather API error:", error);
      return null;
    }
  };

  const handleWeatherCheck = async () => {
    if (!location) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        description: "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);

    try {
      const weatherData = await fetchWeatherData(location);

      if (weatherData) {
        setWeather(weatherData);
        const recs = getCropRecommendations(cropName, weatherData);
        setRecommendations(recs);

        toast({
          title: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü",
          description: `${location} ‡¶è‡¶∞ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
        });
      } else {
        // Fallback to mock data
        setWeather(mockWeather);
        const recs = getCropRecommendations(cropName, mockWeather);
        setRecommendations(recs);

        toast({
          title: "‡¶°‡ßá‡¶Æ‡ßã ‡¶°‡ßá‡¶ü‡¶æ",
          description: "API ‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡ßá‡¶Æ‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ Console ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Weather fetch error:", error);

      // Fallback to mock data on error
      setWeather(mockWeather);
      const recs = getCropRecommendations(cropName, mockWeather);
      setRecommendations(recs);

      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: `‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ${error instanceof Error ? error.message : '‡¶°‡ßá‡¶Æ‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§'}`,
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-4 pb-20 space-y-4">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Cloud className="h-5 w-5 text-primary" />
            ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®</label>
              <Input
                placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ, ‡¶¢‡¶æ‡¶ï‡¶æ"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
              />
              <Button
                variant="outline"
                size="sm"
                onClick={handleLocationFromGPS}
                className="w-full"
              >
                <MapPin className="h-4 w-4 mr-2" />
                GPS ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶®‡¶ø‡¶®
              </Button>
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</label>
              <Input
                placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ß‡¶æ‡¶®, ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã"
                value={cropName}
                onChange={(e) => setCropName(e.target.value)}
              />
            </div>
          </div>

          {/* Season Section */}
          <div className="space-y-2">
            <label className="text-sm font-medium">‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ</label>
            <div className="flex gap-2">
              <Input
                placeholder="‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶Ö‡¶ü‡ßã ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"
                value={currentSeason}
                readOnly
                className="flex-1"
              />
              <Button
                variant="outline"
                onClick={handleAutoSelectSeason}
                className="whitespace-nowrap"
              >
                <Calendar className="h-4 w-4 mr-2" />
                ‡¶Ö‡¶ü‡ßã ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®</label>
            <Textarea
              placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶è‡¶á ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨? ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶¨‡ßá?"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-[80px]"
            />
            <Button
              variant="outline"
              size="sm"
              onClick={handleVoiceInput}
              className="w-full"
            >
              <Mic className="h-4 w-4 mr-2" />
              ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
            </Button>
          </div>

          <div className="flex gap-2">
            <Button
              onClick={handleWeatherCheck}
              className="flex-1"
              disabled={isLoading}
            >
              {isLoading ? "‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ì ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶®‡¶ø‡¶®"}
            </Button>
            <Button
              variant="outline"
              onClick={async () => {
                setLocation("Dhaka");
                const result = await fetchWeatherData("Dhaka");
                console.log("Test result:", result);
                if (result) {
                  setWeather(result);
                  toast({
                    title: "‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤",
                    description: "‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§",
                  });
                } else {
                  toast({
                    title: "‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
                    description: "API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
                    variant: "destructive"
                  });
                }
              }}
              disabled={isLoading}
            >
              ‡¶ü‡ßá‡¶∏‡ßç‡¶ü
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Weather Display */}
      {weather && (
        <>
          {/* Current Weather */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ - {location ? location : "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶®‡ßá‡¶á"}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleWeatherCheck}
                  disabled={isLoading || !location}
                  className="h-8 w-8 p-0"
                >
                  <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="flex items-center gap-2">
                  <Thermometer className="h-5 w-5 text-red-500" />
                  <div>
                    <div className="font-semibold">{weather.temperature}¬∞C</div>
                    <div className="text-sm text-muted-foreground">‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Cloud className="h-5 w-5 text-blue-500" />
                  <div>
                    <div className="font-semibold">{weather.humidity}%</div>
                    <div className="text-sm text-muted-foreground">‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <CloudRain className="h-5 w-5 text-blue-600" />
                  <div>
                    <div className="font-semibold">{weather.rainfall}mm</div>
                    <div className="text-sm text-muted-foreground">‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Wind className="h-5 w-5 text-gray-500" />
                  <div>
                    <div className="font-semibold">{weather.windSpeed} km/h</div>
                    <div className="text-sm text-muted-foreground">‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø</div>
                  </div>
                </div>
              </div>
              <div className="text-center">
                <Badge variant="outline" className="text-lg py-2 px-4">
                  {weather.condition}
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* 7-Day Forecast */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡ß≠ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3">
                {weather.forecast.map((day, index) => (
                  <div key={index} className="text-center border rounded-lg p-3">
                    <div className="text-sm font-medium mb-1">{day.day}</div>
                    <div className="text-2xl mb-1">{day.icon}</div>
                    <div className="font-semibold">{day.temp}¬∞C</div>
                    <div className="text-xs text-muted-foreground">{day.condition}</div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Recommendations */}
          {recommendations.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center justify-between">
                  ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleLocationFromGPS}
                    className="h-8 w-8 p-0"
                  >
                    <MapPin className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {recommendations.map((rec, index) => (
                    <div key={index} className="border-l-4 border-primary pl-4 py-2 bg-primary/5">
                      <p className="text-sm">{rec}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* General Agricultural Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <p><strong>‡¶∏‡¶ï‡¶æ‡¶≤ (‡ß¨-‡ßÆ‡¶ü‡¶æ):</strong> ‡¶∏‡ßá‡¶ö ‡¶ì ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º</p>
                <p><strong>‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞ (‡ßß‡ß®-‡ß©‡¶ü‡¶æ):</strong> ‡¶§‡ßÄ‡¶¨‡ßç‡¶∞ ‡¶∞‡ßã‡¶¶‡ßá ‡¶ï‡¶æ‡¶ú ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®</p>
                <p><strong>‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ (‡ß™-‡ß¨‡¶ü‡¶æ):</strong> ‡¶´‡¶∏‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¶‡¶∞‡ßç‡¶∂‡¶® ‡¶ì ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º</p>
                <p><strong>‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶ó‡ßá:</strong> ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶®‡¶æ‡¶∂‡¶ï ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                <p><strong>‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶™‡¶∞‡ßá:</strong> ‡¶™‡¶æ‡¶®‡¶ø ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</p>
              </div>
            </CardContent>
          </Card>

          {/* Emergency Contacts */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              <p><strong>‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ü‡¶≤‡¶æ‡¶á‡¶®:</strong> ‡ßß‡ß¶‡ßØ‡ß¶</p>
              <p><strong>‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ï‡¶≤ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞:</strong> ‡ßß‡ß¨‡ßß‡ß®‡ß£</p>
              <p><strong>‡¶¶‡ßÅ‡¶∞‡ßç‡¶Ø‡ßã‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ:</strong> ‡ßß‡ß¶‡ßØ‡ß¶</p>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
};

export default WeatherPlanning;