import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Cloud, Sun, CloudRain, Wind, Thermometer, Mic } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  condition: string;
  windSpeed: number;
  forecast: {
    day: string;
    temp: number;
    condition: string;
    icon: string;
  }[];
}

const WeatherPlanning = () => {
  const { toast } = useToast();
  const [location, setLocation] = useState("");
  const [cropName, setCropName] = useState("");
  const [question, setQuestion] = useState("");
  const [weather, setWeather] = useState<WeatherData | null>(null);
  const [recommendations, setRecommendations] = useState<string[]>([]);

  // Mock weather data
  const mockWeather: WeatherData = {
    temperature: 28,
    humidity: 75,
    rainfall: 12,
    condition: "‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ",
    windSpeed: 15,
    forecast: [
      { day: "‡¶Ü‡¶ú", temp: 28, condition: "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚òÅÔ∏è" },
      { day: "‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤", temp: 30, condition: "‡¶∞‡ßã‡¶¶", icon: "‚òÄÔ∏è" },
      { day: "‡¶™‡¶∞‡¶∂‡ßÅ", temp: 26, condition: "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø", icon: "üåßÔ∏è" },
      { day: "‡ß™ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 27, condition: "‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚òÅÔ∏è" },
      { day: "‡ß´ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 29, condition: "‡¶∞‡ßã‡¶¶", icon: "‚òÄÔ∏è" },
      { day: "‡ß¨ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 25, condition: "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø", icon: "üåßÔ∏è" },
      { day: "‡ß≠ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞", temp: 28, condition: "‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶Æ‡ßá‡¶ò‡¶≤‡¶æ", icon: "‚õÖ" }
    ]
  };

  const getCropRecommendations = (crop: string, weather: WeatherData) => {
    const recommendations = [];
    
    if (weather.temperature > 30) {
      recommendations.push("üå°Ô∏è ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶õ‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶∏‡¶ï‡¶æ‡¶≤/‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®");
    }
    
    if (weather.humidity > 80) {
      recommendations.push("üíß ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®");
    }
    
    if (weather.rainfall > 10) {
      recommendations.push("üåßÔ∏è ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ - ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®");
    }
    
    if (weather.windSpeed > 20) {
      recommendations.push("üí® ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏ ‡¶¨‡ßá‡¶∂‡¶ø - ‡¶ó‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶¶‡¶ø‡¶®");
    }

    // Crop specific recommendations
    if (crop.includes("‡¶ß‡¶æ‡¶®")) {
      recommendations.push("üåæ ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶ú‡¶≤‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡ß´-‡ßß‡ß¶ ‡¶∏‡ßá‡¶Æ‡¶ø ‡¶™‡¶æ‡¶®‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®");
    } else if (crop.includes("‡¶ü‡¶Æ‡ßá‡¶ü‡ßã")) {
      recommendations.push("üçÖ ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶™‡¶æ‡¶§‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶®‡¶ø ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®");
    } else if (crop.includes("‡¶∏‡¶¨‡¶ú‡¶ø")) {
      recommendations.push("ü•¨ ‡¶∏‡¶¨‡¶ú‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶∏‡ßá‡¶ö ‡¶¶‡¶ø‡¶®");
    }

    return recommendations;
  };

  const handleVoiceInput = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'bn-BD';
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setQuestion(prev => prev ? `${prev} ${transcript}` : transcript);
      };
      
      recognition.start();
    } else {
      toast({
        title: "‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡ßá‡¶á",
        description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§",
        variant: "destructive"
      });
    }
  };

  const handleWeatherCheck = () => {
    if (!location) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        description: "‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive"
      });
      return;
    }

    setWeather(mockWeather);
    const recs = getCropRecommendations(cropName, mockWeather);
    setRecommendations(recs);
    
    toast({
      title: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü",
      description: "‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ì ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    });
  };

  return (
    <div className="p-4 pb-20 space-y-4">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Cloud className="h-5 w-5 text-primary" />
            ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®</label>
              <Input
                placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ, ‡¶¢‡¶æ‡¶ï‡¶æ"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</label>
              <Input
                placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ß‡¶æ‡¶®, ‡¶ü‡¶Æ‡ßá‡¶ü‡ßã"
                value={cropName}
                onChange={(e) => setCropName(e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®</label>
            <Textarea
              placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶è‡¶á ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨? ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶¨‡ßá?"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-[80px]"
            />
            <Button
              variant="outline"
              size="sm"
              onClick={handleVoiceInput}
              className="w-full"
            >
              <Mic className="h-4 w-4 mr-2" />
              ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
            </Button>
          </div>

          <Button onClick={handleWeatherCheck} className="w-full">
            ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ì ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶®‡¶ø‡¶®
          </Button>
        </CardContent>
      </Card>

      {/* Weather Display */}
      {weather && (
        <>
          {/* Current Weather */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ - {location}</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="flex items-center gap-2">
                  <Thermometer className="h-5 w-5 text-red-500" />
                  <div>
                    <div className="font-semibold">{weather.temperature}¬∞C</div>
                    <div className="text-sm text-muted-foreground">‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Cloud className="h-5 w-5 text-blue-500" />
                  <div>
                    <div className="font-semibold">{weather.humidity}%</div>
                    <div className="text-sm text-muted-foreground">‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <CloudRain className="h-5 w-5 text-blue-600" />
                  <div>
                    <div className="font-semibold">{weather.rainfall}mm</div>
                    <div className="text-sm text-muted-foreground">‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§</div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Wind className="h-5 w-5 text-gray-500" />
                  <div>
                    <div className="font-semibold">{weather.windSpeed} km/h</div>
                    <div className="text-sm text-muted-foreground">‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø</div>
                  </div>
                </div>
              </div>
              <div className="text-center">
                <Badge variant="outline" className="text-lg py-2 px-4">
                  {weather.condition}
                </Badge>
              </div>
            </CardContent>
          </Card>

          {/* 7-Day Forecast */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡ß≠ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3">
                {weather.forecast.map((day, index) => (
                  <div key={index} className="text-center border rounded-lg p-3">
                    <div className="text-sm font-medium mb-1">{day.day}</div>
                    <div className="text-2xl mb-1">{day.icon}</div>
                    <div className="font-semibold">{day.temp}¬∞C</div>
                    <div className="text-xs text-muted-foreground">{day.condition}</div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Recommendations */}
          {recommendations.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {recommendations.map((rec, index) => (
                    <div key={index} className="border-l-4 border-primary pl-4 py-2 bg-primary/5">
                      <p className="text-sm">{rec}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* General Agricultural Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <p><strong>‡¶∏‡¶ï‡¶æ‡¶≤ (‡ß¨-‡ßÆ‡¶ü‡¶æ):</strong> ‡¶∏‡ßá‡¶ö ‡¶ì ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º</p>
                <p><strong>‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞ (‡ßß‡ß®-‡ß©‡¶ü‡¶æ):</strong> ‡¶§‡ßÄ‡¶¨‡ßç‡¶∞ ‡¶∞‡ßã‡¶¶‡ßá ‡¶ï‡¶æ‡¶ú ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®</p>
                <p><strong>‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ (‡ß™-‡ß¨‡¶ü‡¶æ):</strong> ‡¶´‡¶∏‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¶‡¶∞‡ßç‡¶∂‡¶® ‡¶ì ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º</p>
                <p><strong>‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶ó‡ßá:</strong> ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶®‡¶æ‡¶∂‡¶ï ‡¶∏‡ßç‡¶™‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                <p><strong>‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶™‡¶∞‡ßá:</strong> ‡¶™‡¶æ‡¶®‡¶ø ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</p>
              </div>
            </CardContent>
          </Card>

          {/* Emergency Contacts */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              <p><strong>‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ü‡¶≤‡¶æ‡¶á‡¶®:</strong> ‡ßß‡ß¶‡ßØ‡ß¶</p>
              <p><strong>‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶ï‡¶≤ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞:</strong> ‡ßß‡ß¨‡ßß‡ß®‡ß£</p>
              <p><strong>‡¶¶‡ßÅ‡¶∞‡ßç‡¶Ø‡ßã‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ:</strong> ‡ßß‡ß¶‡ßØ‡ß¶</p>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
};

export default WeatherPlanning;